"""Helper functions for AI to interact with storage."""

import uuid
from datetime import datetime
from typing import Any, Dict

from src.models.user_profile import UserProfile
from src.models.workout_log import CompletedExercise, WorkoutLog
from src.models.workout_plan import Exercise, WorkoutDay, WorkoutPlan


def create_user_profile_from_dict(user_id: str, profile_data: Dict[str, Any]) -> UserProfile:
    """
    Create UserProfile from dictionary data collected during onboarding.

    Args:
        user_id: User email from OAuth
        profile_data: Dictionary with profile information

    Returns:
        UserProfile object

    Example:
        profile_data = {
            "goals": ["схуднення", "витривалість"],
            "schedule": {"Понеділок": "18:00-19:00", "Середа": "18:00-19:00"},
            "health_conditions": ["біль в коліні"],
            "fitness_level": "beginner",
            "equipment_available": ["гантелі", "власна вага"],
            "preferences": {"dislikes": ["біг"]}
        }
    """
    # Handle preferences - ensure it's a dict
    preferences = profile_data.get("preferences", {})
    if not isinstance(preferences, dict):
        # If AI sent a list or string, convert to dict
        if isinstance(preferences, list):
            preferences = {"items": preferences}
        elif isinstance(preferences, str):
            preferences = {"note": preferences}
        else:
            preferences = {}

    return UserProfile(
        user_id=user_id,
        goals=profile_data.get("goals", []),
        schedule=profile_data.get("schedule", {}),
        health_conditions=profile_data.get("health_conditions", []),
        fitness_level=profile_data.get("fitness_level", "beginner"),
        equipment_available=profile_data.get("equipment_available", []),
        preferences=preferences,
        additional_notes=profile_data.get("additional_notes", ""),
    )


def create_workout_plan_from_dict(user_id: str, plan_data: Dict[str, Any]) -> WorkoutPlan:
    """
    Create WorkoutPlan from dictionary data generated by AI.

    Args:
        user_id: User email
        plan_data: Dictionary with workout plan structure

    Returns:
        WorkoutPlan object

    Example:
        plan_data = {
            "weeks": 8,
            "days_per_week": 3,
            "notes": "План для схуднення",
            "plan": {
                "week_1": [
                    {
                        "day_name": "Понеділок - Верх тіла",
                        "exercises": [
                            {
                                "name": "Віджимання",
                                "sets": 3,
                                "reps": "10-12",
                                "rest_seconds": 90,
                                "instructions": "Тримай спину прямо"
                            }
                        ],
                        "notes": "Розминка 5 хвилин"
                    }
                ]
            }
        }
    """
    # Parse plan structure
    parsed_plan = {}
    for week_key, days in plan_data.get("plan", {}).items():
        # Ensure days is a list
        if not isinstance(days, list):
            # If AI sent a string or dict, skip this week
            continue

        parsed_days = []
        for day_data in days:
            # Ensure day_data is a dict
            if not isinstance(day_data, dict):
                # If it's a string, create minimal day structure
                if isinstance(day_data, str):
                    day_data = {"day_name": day_data, "exercises": []}
                else:
                    continue

            # Parse exercises
            exercises = []
            exercises_data = day_data.get("exercises", [])
            if isinstance(exercises_data, list):
                for ex in exercises_data:
                    if isinstance(ex, dict):
                        try:
                            exercises.append(Exercise(**ex))
                        except Exception:
                            # Skip invalid exercise
                            continue

            workout_day = WorkoutDay(
                day_name=day_data.get("day_name", "Unnamed Day"),
                exercises=exercises,
                notes=day_data.get("notes", ""),
                estimated_duration_minutes=day_data.get("estimated_duration_minutes", 45),
            )
            parsed_days.append(workout_day)

        if parsed_days:  # Only add week if it has valid days
            parsed_plan[week_key] = parsed_days

    return WorkoutPlan(
        plan_id=str(uuid.uuid4()),
        user_id=user_id,
        weeks=plan_data.get("weeks", 4),
        days_per_week=plan_data.get("days_per_week", 3),
        plan=parsed_plan,
        status="active",
        notes=plan_data.get("notes", ""),
    )


def create_workout_log_from_dict(user_id: str, log_data: Dict[str, Any]) -> WorkoutLog:
    """
    Create WorkoutLog from dictionary data logged by user.

    Args:
        user_id: User email
        log_data: Dictionary with workout log data

    Returns:
        WorkoutLog object

    Example:
        log_data = {
            "date": "2025-01-15T18:00:00",
            "planned_exercises": [...],
            "completed_exercises": [
                {
                    "exercise_name": "Віджимання",
                    "sets_completed": 3,
                    "reps_per_set": [12, 10, 8],
                    "weight_per_set": [0, 0, 0],
                    "notes": "Було важко"
                }
            ],
            "feedback": "Відчував себе добре",
            "duration_minutes": 45,
            "skipped": False
        }
    """
    planned_exercises = []
    for ex_data in log_data.get("planned_exercises", []):
        if isinstance(ex_data, dict):
            planned_exercises.append(Exercise(**ex_data))

    completed_exercises = []
    for comp_ex in log_data.get("completed_exercises", []):
        if isinstance(comp_ex, dict):
            # Handle weight_per_set - convert text to 0 and add to notes
            weight_per_set = comp_ex.get("weight_per_set", [])
            cleaned_weights = []
            weight_notes = []

            for i, weight in enumerate(weight_per_set):
                if isinstance(weight, str):
                    # Text like "власна вага", "з гумою" - convert to 0
                    cleaned_weights.append(0.0)
                    weight_notes.append(f"Підхід {i+1}: {weight}")
                elif isinstance(weight, (int, float)):
                    cleaned_weights.append(float(weight))
                else:
                    cleaned_weights.append(0.0)

            # Add weight notes to existing notes
            exercise_notes = comp_ex.get("notes", "")
            if weight_notes:
                weight_note_text = "; ".join(weight_notes)
                if exercise_notes:
                    exercise_notes = f"{exercise_notes} ({weight_note_text})"
                else:
                    exercise_notes = weight_note_text

            # Create cleaned dict for CompletedExercise
            cleaned_comp_ex = {
                "exercise_name": comp_ex.get("exercise_name", "Unknown"),
                "sets_completed": comp_ex.get("sets_completed", 0),
                "reps_per_set": comp_ex.get("reps_per_set", []),
                "weight_per_set": cleaned_weights,
                "notes": exercise_notes,
            }

            try:
                completed_exercises.append(CompletedExercise(**cleaned_comp_ex))
            except Exception:
                # Skip invalid exercise
                continue

    # Parse date if string
    workout_date = log_data.get("date")
    if isinstance(workout_date, str):
        workout_date = datetime.fromisoformat(workout_date)
    elif workout_date is None:
        workout_date = datetime.now()

    return WorkoutLog(
        log_id=str(uuid.uuid4()),
        user_id=user_id,
        date=workout_date,
        planned_exercises=planned_exercises,
        completed_exercises=completed_exercises,
        feedback=log_data.get("feedback", ""),
        duration_minutes=log_data.get("duration_minutes", 0),
        skipped=log_data.get("skipped", False),
        skip_reason=log_data.get("skip_reason"),
    )


def format_workout_plan_for_display(plan: WorkoutPlan) -> str:
    """
    Format WorkoutPlan for readable display in chat.

    Args:
        plan: WorkoutPlan object

    Returns:
        Formatted string for display
    """
    output = f"**План тренувань на {plan.weeks} тижнів**\n\n"
    output += f"Тренувань на тиждень: {plan.days_per_week}\n"
    if plan.notes:
        output += f"*{plan.notes}*\n"
    output += "\n---\n\n"

    for week_key in sorted(plan.plan.keys()):
        week_num = week_key.replace("week_", "")
        output += f"### Тиждень {week_num}\n\n"

        for day in plan.plan[week_key]:
            output += f"**{day.day_name}** ({day.estimated_duration_minutes} хв)\n"
            if day.notes:
                output += f"*{day.notes}*\n"
            output += "\n"

            for i, exercise in enumerate(day.exercises, 1):
                output += f"{i}. **{exercise.name}**\n"
                output += f"   - {exercise.sets} підходи x {exercise.reps} повторів\n"
                if exercise.weight:
                    output += f"   - Вага: {exercise.weight} кг\n"
                output += f"   - Відпочинок: {exercise.rest_seconds} сек\n"
                if exercise.instructions:
                    output += f"   - *{exercise.instructions}*\n"
                output += "\n"

        output += "---\n\n"

    return output


def format_user_profile_for_context(profile: UserProfile) -> str:
    """
    Format UserProfile for AI context.

    Args:
        profile: UserProfile object

    Returns:
        Formatted string with profile info
    """
    output = "**Профіль користувача:**\n"
    output += f"- Рівень: {profile.fitness_level}\n"
    output += f"- Цілі: {', '.join(profile.goals)}\n"

    if profile.schedule:
        output += "- Розклад:\n"
        for day, time in profile.schedule.items():
            output += f"  - {day}: {time}\n"

    if profile.health_conditions:
        output += f"- Обмеження здоров'я: {', '.join(profile.health_conditions)}\n"

    if profile.equipment_available:
        output += f"- Доступне обладнання: {', '.join(profile.equipment_available)}\n"

    if profile.preferences:
        output += f"- Вподобання: {profile.preferences}\n"

    if profile.additional_notes:
        output += f"\n**Додаткові примітки:**\n{profile.additional_notes}\n"

    return output
